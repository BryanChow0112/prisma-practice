// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" // Generates Prisma Client for JavaScript/TypeScript
}

datasource db {
  provider = "postgresql" // Using PostgreSQL database
  url      = env("DATABASE_URL") // Database connection URL from environment variable
}

// Relationships:
// 1:1/0: User <-> UserPreference
// 1:N: User -> Post (writtenPosts)
// 1:N: User -> Post (favoritePosts)
// N:M: Post <-> Category

model User {
  id               String          @id @default(uuid()) // Primary key, UUID
  age              Int
  name             String
  email            String          @unique
  role             Role            @default(BASIC) // User role, defaults to BASIC
  writtenPosts     Post[]          @relation("WrittenPosts") // Posts written by user (1:N relation)
  favoritePosts    Post[]          @relation("FavoritePosts") // Posts favorited by user (1:N relation)
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id]) // Optional UserPreference (1:1/0)
  userPreferenceId String?         @unique // Foreign key to UserPreference, unique for 1:1

  @@unique([age, name]) // Unique constraint on age and name combination
  @@index([email]) // Index on email for faster queries
}

model UserPreference {
  id           String  @id @default(uuid()) // Primary key, UUID
  emailUpdates Boolean
  user         User? // Optional relation back to User (1:1/0)
}

model Post {
  id            String     @id @default(uuid()) // Primary key, UUID
  title         String
  averageRating Float
  createdAt     DateTime   @default(now()) // Creation timestamp, defaults to now
  updatedAt     DateTime   @updatedAt // Update timestamp, auto-updates on changes
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id]) // Author of the post (1:N to User)
  authorId      String // Foreign key to User (author)
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id]) // User who favorited (1:N, review for N:M)
  favoritedById String? // Foreign key to User (favoritedBy)
  categories    Category[] // Categories of the post (N:M to Category)
}

model Category {
  id    String @id @default(uuid()) // Primary key, UUID
  name  String @unique
  posts Post[] // Posts in this category (N:M to Post)
}

enum Role {
  BASIC // Basic user role
  ADMIN // Administrator role
}
